problem:
https://leetcode.com/problems/longest-arithmetic-subsequence/

solution:
// Dynamic programming approach
class Solution {
    public int longestArithSeqLength(int[] nums) {
        int length=nums.length;
        HashMap<Integer,Integer>[] dp=new HashMap[length];
        int maxValue=1;
        for(int i=0;i<length;i++){
            int currentElement=nums[i];
            dp[i]=new HashMap<>();
            HashMap<Integer,Integer> currentMap=dp[i];
            // Empty hashmap of the current element that we are going to construct now
            for(int j=0;j<i;j++){
                int difference=currentElement-nums[j];
                HashMap<Integer,Integer> prevMap=dp[j];
                int newValue=prevMap.getOrDefault(difference,0)+1;
                currentMap.put(difference,newValue);
                dp[i]=currentMap;
                maxValue=Math.max(maxValue,currentMap.get(difference));
            }
        }

        return (maxValue+1);
         
    }
}
